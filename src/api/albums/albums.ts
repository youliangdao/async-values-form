/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 * json-placeholder API
 * json-placeholder API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import * as axios from "@/config/axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { Album } from ".././types";

/**
 * @summary Get a list of albums
 */
export const getAlbums = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Album[]>> => {
  return axios.default.get(`/albums`, options);
};

export const getGetAlbumsQueryKey = () => {
  return [`/albums`] as const;
};

export const getGetAlbumsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAlbums>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAlbums>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAlbumsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAlbums>>> = ({
    signal,
  }) => getAlbums({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAlbums>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAlbumsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAlbums>>
>;
export type GetAlbumsQueryError = AxiosError<unknown>;

/**
 * @summary Get a list of albums
 */
export const useGetAlbums = <
  TData = Awaited<ReturnType<typeof getAlbums>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAlbums>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAlbumsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get an album by ID
 */
export const getAlbumsAlbumId = (
  albumId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Album>> => {
  return axios.default.get(`/albums/${albumId}`, options);
};

export const getGetAlbumsAlbumIdQueryKey = (albumId: number) => {
  return [`/albums/${albumId}`] as const;
};

export const getGetAlbumsAlbumIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAlbumsAlbumId>>,
  TError = AxiosError<unknown>,
>(
  albumId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAlbumsAlbumId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAlbumsAlbumIdQueryKey(albumId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAlbumsAlbumId>>
  > = ({ signal }) => getAlbumsAlbumId(albumId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!albumId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAlbumsAlbumId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAlbumsAlbumIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAlbumsAlbumId>>
>;
export type GetAlbumsAlbumIdQueryError = AxiosError<unknown>;

/**
 * @summary Get an album by ID
 */
export const useGetAlbumsAlbumId = <
  TData = Awaited<ReturnType<typeof getAlbumsAlbumId>>,
  TError = AxiosError<unknown>,
>(
  albumId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAlbumsAlbumId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAlbumsAlbumIdQueryOptions(albumId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
