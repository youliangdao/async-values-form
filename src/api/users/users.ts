/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 * json-placeholder API
 * json-placeholder API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import * as axios from "@/config/axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { User } from ".././types";

/**
 * @summary Get a list of users
 */
export const getUsers = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<User[]>> => {
  return axios.default.get(`/users`, options);
};

export const getGetUsersQueryKey = () => {
  return [`/users`] as const;
};

export const getGetUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({
    signal,
  }) => getUsers({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsers>>
>;
export type GetUsersQueryError = AxiosError<unknown>;

/**
 * @summary Get a list of users
 */
export const useGetUsers = <
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUsersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get a user by ID
 */
export const getUsersUserId = (
  userId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<User>> => {
  return axios.default.get(`/users/${userId}`, options);
};

export const getGetUsersUserIdQueryKey = (userId: number) => {
  return [`/users/${userId}`] as const;
};

export const getGetUsersUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersUserId>>,
  TError = AxiosError<unknown>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersUserId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersUserIdQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUserId>>> = ({
    signal,
  }) => getUsersUserId(userId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersUserId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersUserId>>
>;
export type GetUsersUserIdQueryError = AxiosError<unknown>;

/**
 * @summary Get a user by ID
 */
export const useGetUsersUserId = <
  TData = Awaited<ReturnType<typeof getUsersUserId>>,
  TError = AxiosError<unknown>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersUserId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUsersUserIdQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
